function [q_av] = QUEST(q1,q2,w1,w2)
    B = w1*EP2C(q1) + w2*EP2C(q2); 
    Z = [(B(2,3) - B(3,2)) (B(3,1)-B(1,3)) (B(1,2)-B(2,1)) ]';
    S = B + B'; 

    K = [trace(B) Z'
        Z S-trace(B)*eye(3)    
        ];

   lamba_opt = w1+ w2; %should be less than or equal to one

    %Compute lambda using lambda characteristic polynomial:
    %Could also be computed less efficiently from 
    % K=[S-eye(3)*trB z; z' trB];
    % [dummy, lam]=eigs(K, 1);

    detS=det(S);
    adjS=detS*inv(S);

    a=trB^2 - trace(adjS);  
    b=trB^2 + z'*z;
    c=detS + z'*S*z;
    d=z'*S*S*z;
    cnst=a*b + c*trB - d;
    
    lam=0.5*(sum(sum(qp.^2)) + sum(sum(pp.^2))); % 0.5*(trace(qp*qp') + trace(pp*pp'));
    lamprev=0.0;
    
    % Newton-Raphson
    while abs((lam-lamprev)/lam) >= 1E-12
        lamprev=lam;
        lam=lam - (((lam^2 - (a+b))*lam - c)*lam + cnst)/(2*(2*lam^2 - (a+b))*lam - c);
    end

    qbar = inv( (lam+trace(B))*eye(3) - S )*Z

end

